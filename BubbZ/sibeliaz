#!/bin/bash

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
k=25
b=200
m=50
a=150
f=
threads=`nproc`
infile=
outdir="./sibeliaz_out"
align="True"
noseq=""

usage () { echo "Usage: [-k <odd integer>] [-b <integer>] [-m <integer>] [-a <integer>] [-t <integer>] [-f <integer>] [-o <output_directory>] [-n] <input file> " ;}

options='t:k:b:a:m:o:f:nh'
while getopts $options option
do
    case $option in
	k  ) k=$OPTARG;;
	b  ) b=$OPTARG;;
	m  ) m=$OPTARG;;
	a  ) a=$OPTARG;;
	t  ) threads=$OPTARG;;
	o  ) outdir=$OPTARG;;
	f  ) f=$OPTARG;;
	n  ) align="False";;
	h  ) usage; exit;;
	\? ) echo "Unknown option: -$OPTARG" >&2; exit 1;;
	:  ) echo "Missing option argument for -$OPTARG" >&2; exit 1;;
	*  ) echo "Unimplemented option: -$OPTARG" >&2; exit 1;;
    esac
done


shift $((OPTIND-1))

if [ "$align" = "False" ]
then
	noseq="--noseq"
fi

if [ -z "$1" ]
then
	echo "You must provide the input file name" >&2
	exit 1
fi

if [ -z "$f" ]
then
	echo "You must set the memory pre-allocaiton size" >&2
	exit 1
fi

min() {
   [ "$1" -lt "$2" ] && echo $1 || echo $2
}

align()
{
        output="$($3/spoa $1 -l 1 -r 1 2> /dev/null | tail -n +2)"
        rcode="${PIPESTATUS[0]}"
        if [[ -z "${output// }" ]]
        then
                return
        fi

        if [ $? -eq 0 ]
        then
		lines=`echo -n "$output" | grep -c '^'`
                header="$(sed -n -e '/^>/p' $1 | cut -d' ' -f2- | sed  's/;/ /g' | sed -e 's/^/s /' | head -n $lines)"
                (
                        flock 200
                        echo "" >> "$2"
                        echo "a" >> "$2"
                        paste <(echo "$header") <(echo "$output") --delimiters ' ' >> "$2"
                ) 200>> "$2"
		rm $1
        fi
}

export -f align


infile=$1
twopaco_threads=$( min $threads 16 )
lcb_threads=$( min $threads 4 )
dbg_file=$outdir/de_bruijn_graph.dbg

mkdir -p $outdir
echo "Constructing the graph..."
$DIR/twopaco --tmpdir $outdir -t $twopaco_threads -k $k --filtermemory $f -o $dbg_file $infile
$DIR/sibeliaz-lcb --graph $dbg_file --fasta $infile -k $k -b $b -o $outdir -m $m -t $lcb_threads --abundance $a $noseq

rm $dbg_file

if [ "$align" = "True" ]
then
	echo "Performing global alignment.."
	outfile=$outdir/alignment.maf
	echo "##maf version=1" > "$outfile"
	ulimit -v $(($f * 1000000))
	ulimit -m $(($f * 1000000))
	find $outdir/blocks -name "*.fa" -printf "$PWD/%p\n" | xargs -I @ -P "$threads" bash -c "align @ '$outfile' '$DIR'"
	find $outdir/blocks -name "*.fa" -printf "$PWD/%p\n" | xargs -I @ -P 1 bash -c "align @ '$outfile' '$DIR'"
fi




